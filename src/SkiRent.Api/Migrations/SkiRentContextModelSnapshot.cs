// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkiRent.Api.Data;

#nullable disable

namespace SkiRent.Api.Migrations
{
    [DbContext(typeof(SkiRentContext))]
    partial class SkiRentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SkiRent.Api.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressCity")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressPostalCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("utc_timestamp()");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Pending','Paid','InDelivery','Received','Cancelled','Returned')")
                        .HasDefaultValueSql("'Pending'");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("utc_timestamp()");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PaymentId" }, "PaymentId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int(11)");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int(11)");

                    b.Property<string>("NameAtBooking")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PriceAtBooking")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookingId", "EquipmentId" }, "BookingId")
                        .IsUnique();

                    b.ToTable("bookingitems");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int(11)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("MainImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "CategoryId");

                    b.HasIndex(new[] { "MainImageId" }, "MainImageId");

                    b.ToTable("equipments");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.EquipmentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name")
                        .IsUnique();

                    b.ToTable("equipmentcategories");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.EquipmentImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("utc_timestamp()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("utc_timestamp()");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("equipmentimages");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int(11)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("utc_timestamp()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookingId" }, "BookingId")
                        .IsUnique()
                        .HasDatabaseName("BookingId1");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Admin','Customer')")
                        .HasDefaultValueSql("'Customer'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Booking", b =>
                {
                    b.HasOne("SkiRent.Api.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("bookings_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.BookingItem", b =>
                {
                    b.HasOne("SkiRent.Api.Data.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bookingitems_ibfk_1");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Equipment", b =>
                {
                    b.HasOne("SkiRent.Api.Data.Models.EquipmentCategory", "Category")
                        .WithMany("Equipment")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("equipments_ibfk_1");

                    b.HasOne("SkiRent.Api.Data.Models.EquipmentImage", "MainImage")
                        .WithMany("Equipment")
                        .HasForeignKey("MainImageId")
                        .HasConstraintName("equipments_ibfk_2");

                    b.Navigation("Category");

                    b.Navigation("MainImage");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Invoice", b =>
                {
                    b.HasOne("SkiRent.Api.Data.Models.Booking", "Booking")
                        .WithOne("Invoice")
                        .HasForeignKey("SkiRent.Api.Data.Models.Invoice", "BookingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("invoices_ibfk_2");

                    b.HasOne("SkiRent.Api.Data.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("invoices_ibfk_1");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.EquipmentCategory", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.EquipmentImage", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("SkiRent.Api.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
